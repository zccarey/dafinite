
Running Dafny compiler:
    Run like "dafny /finitize:Server=1,Client=2 /vprint <vmtFile> /rprint <whatever>". Pass "-" as <vmtFile> to print to stdout.


========== DATATYPES ==========

- There must be a datatype "DafnyState" that embodies the state.
- All other datatypes are the finitized types specified on the command line.
      NOTE: Perhaps can relax this as long as state-important datatypes are part of the DafnyState ctor???
- All of the finitized types specificed on the command line must appear in the Dafny program.
- FOR NOW, datatypes can only have one constructor.
      NOTE: Actually probably don't care about this. Any constructor logic should be in a relation.
- If a datatype needs a unique ID, its constructor should take an integer parameter "id" ("id: int").
  The "id" parameter will be generally ignored and "identification" will be handled by the finitization logic.
      NOTE: Actually probably don't care about this. Put any ID logic in a relation (Exists special???)

========== PREDICATES ==========

- There must be an Init and a Next
    - Init must take as parameter a single instance of DafnyState
    - Next must take two DafnyStates as parameters.
      The first represents the new state, and the second represents the old/prev state.
- All other predicates must be Actions or Relations, with respective name prefix
  "Action" and "Relation"
    - Relations must take as their first parameter a DafnyState (??? Don't think this is needed, not currently checking)
    - Actions must take exactly two parameters, both DafnyStates.
      The first represents the new state, and the second represents the old/prev state.
- No other predicates allowed (for now)

========== EXPRESSIONS ==========

- Essentially, expressions better be simple boolean logic (including quantifiers), and relations.